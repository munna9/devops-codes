#!/bin/bash
#
# elastalert          elastalert shipper
#
# chkconfig: 2345 99 02
# description: Starts and stops a elastalert instance on this system
#

### BEGIN INIT INFO
# Provides:          elastalert
# Required-Start:    $local_fs $network $syslog
# Required-Stop:     $local_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Elastealert alerts on Logging isses.
# Description:       Elastealert alerts on Logging isses
### END INIT INFO



PATH=/usr/bin:/sbin:/bin:/usr/sbin
export PATH
pidfile=${PIDFILE-/var/run/elastalert.pid}
agent=${ESALERT_AGENT-/usr/local/bin/elastalert}
args="--config <%=node['elastalert']['app']['conf_directory']%>/config.yml --verbose"
RETVAL=0

# Source function library.
. /etc/rc.d/init.d/functions

# Determine if we can use the -p option to daemon, killproc, and status.
# RHEL < 5 can't.
if status | grep -q -- '-p' 2>/dev/null; then
daemonopts="--pidfile $pidfile"
pidopts="-p $pidfile"
fi

start() {
echo -n $"Starting elastalert: "
if [ $? -ne 0 ]; then
echo
exit 1
fi
daemon $daemonopts $agent $args
RETVAL=$?
echo
return $RETVAL
}

stop() {
echo -n $"Stopping elastalert: "
killproc $pidopts
RETVAL=$?
echo
[ $RETVAL = 0 ] && rm -f ${pidfile}
}

restart() {
if [ $? -ne 0 ]; then
return 1
fi
stop
start
}

rh_status() {
status $pidopts
RETVAL=$?
return $RETVAL
}

rh_status_q() {
rh_status >/dev/null 2>&1
}

case "$1" in
start)
start
;;
stop)
stop
;;
restart)
restart
;;
condrestart|try-restart)
rh_status_q || exit 0
restart
;;
status)
rh_status
;;
*)
echo $"Usage: $0 {start|stop|status|restart|condrestart}"
exit 1
esac

exit $RETVAL